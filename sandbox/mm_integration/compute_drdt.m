function [drdt] = compute_drdt(time,r,tau_T,T_eq,T_s_0,T_a,RH,P,m_s,maxEr_s,maxIt)
helpingAnonFxns;
P_Pa = mb2Pa(P);
rd = (3*m_s/(4*pi*2165))^(1/3);
if r<rd
    error('r <rd')
end
% -------------------------------------------------------------------
%    		  		f
% -------------------------------------------------------------------
f = RH/100;

% -------------------------------------------------------------------
%    		  		T_s
% -------------------------------------------------------------------
T_s = exp(-time/tau_T)*(T_s_0-T_eq) + T_eq;

% -------------------------------------------------------------------
%    		  		m_w
% -------------------------------------------------------------------
m_w = compute_m_w(T_s,r,m_s,P_Pa,maxEr_s,maxIt);

% -------------------------------------------------------------------
%    		  		s
% -------------------------------------------------------------------
s = m_s/(m_w+m_s);

% -------------------------------------------------------------------
%    		  		e_sat
% -------------------------------------------------------------------
e_sat_Pa =  mb2Pa(e_sat(T_a,P));

% -------------------------------------------------------------------
%    		  		drdt
% -------------------------------------------------------------------
T_a_Kelvin = Celsius2Kelvin(T_a);
load('microphysicalConstants.mat','R','M_w')

% constants: 		f, R, M_w, T_a_Kelvin, e_sat_Pa
% vary in time: 	y,r,rho_s,Phi_s, r, rho_s, D_w_prime, k_a_prime(r(t)), L_v(T_s(t))

drdt   =(((f-1)-y(T_s,T_a,r,m_s,s,P_Pa))./r)/(rho_s(T_s,r,m_s,s,P_Pa).*R.*T_a_Kelvin./(D_w_prime(T_s,P,r).*M_w.*e_sat_Pa)+rho_s(T_s,r,m_s,s,P_Pa).*L_v(T_s,s*1000)./(k_a_prime(T_s,P,r).*T_a_Kelvin).*(L_v(T_s,s*1000).*M_w./(R.*T_a_Kelvin)-1));

























